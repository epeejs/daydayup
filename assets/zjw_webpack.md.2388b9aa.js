import{_ as a,c as s,o as l,R as o}from"./chunks/framework.3876c926.js";const h=JSON.parse('{"title":"webpack 总览","description":"","frontmatter":{},"headers":[],"relativePath":"zjw/webpack.md"}'),e={name:"zjw/webpack.md"},n=o(`<h1 id="webpack-总览" tabindex="-1">webpack 总览 <a class="header-anchor" href="#webpack-总览" aria-label="Permalink to &quot;webpack 总览&quot;">​</a></h1><p>loader 用于转换某些类型的模块，插件则用于扩展 webpack 功能，通过注入钩子参与构建流程</p><h2 id="构建流程" tabindex="-1">构建流程 <a class="header-anchor" href="#构建流程" aria-label="Permalink to &quot;构建流程&quot;">​</a></h2><ol><li>初始化参数</li><li>通过参数初始化 Compiler 对象，加载所有配置的插件，执行 run 方法开始编译</li><li>根据 entry 递归找到所有依赖，并根据文件类型，使用配置 loader 处理文件</li><li>完成所有模块转换后，构建依赖图</li><li>根据依赖图组装成一个个包含多模块的 chunk，再把 chunk 加入输出列表（插件最后修改输出内容时机）</li><li>根据配置确定输出内容的路径与文件名，写入文件系统</li></ol><h2 id="打包速度优化-简言之-减少打包量、并行、缓存、预构建" tabindex="-1">打包速度优化（简言之：减少打包量、并行、缓存、预构建） <a class="header-anchor" href="#打包速度优化-简言之-减少打包量、并行、缓存、预构建" aria-label="Permalink to &quot;打包速度优化（简言之：减少打包量、并行、缓存、预构建）&quot;">​</a></h2><ul><li>缩小处理文件 <ul><li>resolve.alias：直接指定打包好的代码（仅开发）</li><li>优化 loader 配置：开启缓存、include 减少匹配文件</li><li>减少文件匹配路径：resolve 匹配规则</li><li>优化解析规则：module.noParse 指定不使用模块化解析文件</li><li>按需加载</li><li><a href="https://webpack.docschina.org/configuration/experiments/#experimentslazycompilation" target="_blank" rel="noreferrer">懒编译</a></li></ul></li><li>并行打包</li><li><a href="https://webpack.docschina.org/configuration/cache/" target="_blank" rel="noreferrer">构建缓存</a></li><li>模块联邦</li></ul><h2 id="webpack-hrm-原理" tabindex="-1">webpack HRM 原理 <a class="header-anchor" href="#webpack-hrm-原理" aria-label="Permalink to &quot;webpack HRM 原理&quot;">​</a></h2><p>webpack-dev-server 向网页注入用于连接开发服务的客户端代码，在代码变更时编译出新的补丁文件，发送到网页执行</p><p>当模块变更后，更新事件会向上传递，直到某层接受了当前变化的模块，就会调用 callback 去执行自定义逻辑。当上抛到最外层没有被接受，就会刷新整个网页</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">module.</span><span style="color:#A6ACCD;">hot) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">module.</span><span style="color:#A6ACCD;">hot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">accept</span><span style="color:#F07178;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./App</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">render</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">App</span><span style="color:#89DDFF;"> /&gt;,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="scope-hoisting-作用域提升" tabindex="-1">Scope Hoisting（作用域提升） <a class="header-anchor" href="#scope-hoisting-作用域提升" aria-label="Permalink to &quot;Scope Hoisting（作用域提升）&quot;">​</a></h2><p>合并 ES6 模块导入，且只被引用一次</p><p>好处：代码体积更小；内存开销减少，通过减少作用域创建函数</p><h2 id="compiler-和-compilation" tabindex="-1">Compiler 和 Compilation <a class="header-anchor" href="#compiler-和-compilation" aria-label="Permalink to &quot;Compiler 和 Compilation&quot;">​</a></h2><p>compiler 代表了整个 Webpack 从启动到关闭的生命周期，而 compilation 只是代表了一次新的编译，由 compiler 每次构建创建</p><p>compilation 包含了当前的模块资源、编译生成资源、变化的文件等</p><h2 id="loader-用法" tabindex="-1">loader 用法 <a class="header-anchor" href="#loader-用法" aria-label="Permalink to &quot;loader 用法&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 用正则去匹配要用该 loader 转换的 CSS 文件</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">css</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">use</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">style-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">css-loader?minimize</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><ul><li>use 属性由 loader 名称组成的数组，loader 从后往前执行</li><li>每个 loader 可以通过 URL querystring 方式传入参数，也可以通过对象形式传入 <code>{ loader: &#39;css-loader&#39;, options: { minimize: true } }</code></li><li>内联方式使用 loader，<code>import &#39;!style-loader!css-loader?minimize!./styles.css&#39;</code></li></ul>`,19),p=[n];function t(r,c,i,F,y,D){return l(),s("div",null,p)}const m=a(e,[["render",t]]);export{h as __pageData,m as default};
